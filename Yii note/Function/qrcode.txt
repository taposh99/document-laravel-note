
    public function actionUpdateAllQrStrings()
        {
            $distributors = Distributor::model()->findAll();

            if (!empty($distributors)) {
                foreach ($distributors as $distributor) {
                    if (!empty($distributor->id)) {
                        $encodedId = base64_encode($distributor->id);
                        $qrString = 'http://192.168.1.184:81/sharif_metal/plumber/plumber/registration?id=' . $encodedId;
                        $distributor->qrstring = $qrString;
                        $distributor->save(false, ['qrstring']); 
                    }
                }
                echo CJSON::encode([
                    'status' => 'success',
                    'message' => 'All QR codes updated successfully!',
                ]);
            } else {
                echo CJSON::encode([
                    'status' => 'error',
                    'message' => 'No distributors found!',
                ]);
            }
            
            Yii::app()->end();
        }



    public function actionUpdatePreviousSpentLeaveData()
    {
        $leaveRecords = EmpLeavesNormal::model()->findAllByAttributes(['is_approved' => 16]);
        foreach ($leaveRecords as $leave_data) {
            if (!$leave_data) {
                continue;
            }
            $applied_days = $leave_data->applied_days;
            $lhRecord = LhAmountProllNormal::model()->findByAttributes([
                'employee_id' => $leave_data->emp_id,
                'lh_proll_normal_id' => $leave_data->lh_proll_normal_id,
                'is_active' => 1
            ]);

            if ($lhRecord) {
                $lhRecord->spent_leave += $applied_days;
                $lhRecord->save();
            }
        }

        echo "All previous data updated successfully.";
    }

    public function actionUpdateStartEndDates()
    {
        $criteria = new CDbCriteria();
        $criteria->addCondition('is_active = 1');
        $criteria->addCondition('lh_proll_normal_id = 4');
        $criteria->addCondition('start_from IS NULL');
        $criteria->addCondition('end_to IS NULL');
    
        $records = LhAmountProllNormal::model()->findAll($criteria);
    
        foreach ($records as $record) {
            $year = date('Y', strtotime($record->create_time));
            $record->start_from = $year . '-01-01';
            $record->end_to = $year . '-12-31';
    
            if ($record->save()) {
                echo "Updated ID: {$record->id}<br>";
            } else {
                echo "Failed to update ID {$record->id}: ";
                print_r($record->getErrors());
                echo "<br>";
            }
        }
    
        echo "Update complete.";
    }

    public function actionGetRemainingMismatchList()
    {
        $mismatches = [];
    
        $advanceList = AdvancePayRecv::model()->findAll();
    
        foreach ($advanceList as $advance) {
            $paidAmount = LoanInstallments::model()->find([
                'select' => 'SUM(amount) AS total',
                'condition' => 'advance_pay_recv_id = :id',
                'params' => [':id' => $advance->id],
            ])->total;
    
            $paidAmount = $paidAmount ?: 0;
    
            $calculatedRemaining = $advance->amount - $paidAmount;
    
            if ((int)$calculatedRemaining !== (int)$advance->remaining_amount) {
                $mismatches[] = $advance->id;
            }
        }
    
        if (empty($mismatches)) {
            echo CJSON::encode([
                'status' => 'success',
                'message' => 'All records matched. No mismatch found.',
            ]);
        } else {
            echo CJSON::encode([
                'status' => 'success',
                'mismatched_ids' => $mismatches,
            ]);
        }
    
        Yii::app()->end();
    }
    public function actionFixRemainingMismatch()
    {
        $fixedIds = [];

        $advanceList = AdvancePayRecv::model()->findAll();

        foreach ($advanceList as $advance) {
            $paidAmount = LoanInstallments::model()->find([
                'select' => 'SUM(amount) AS total',
                'condition' => 'advance_pay_recv_id = :id',
                'params' => [':id' => $advance->id],
            ])->total;

            $paidAmount = $paidAmount ?: 0;

            $calculatedRemaining = $advance->amount - $paidAmount;

            if ((int)$calculatedRemaining !== (int)$advance->remaining_amount) {
                $advance->remaining_amount = $calculatedRemaining;
                if ($advance->save(false)) {
                    $fixedIds[] = $advance->id;
                }
            }
        }
        if (empty($fixedIds)) {
            echo CJSON::encode([
                'status' => 'success',
                'message' => 'No mismatches found. All records are already correct.',
            ]);
        } else {
            echo CJSON::encode([
                'status' => 'success',
                'message' => 'Mismatched records fixed successfully.',
                'updated_ids' => $fixedIds,
            ]);
        }

        Yii::app()->end();
    }