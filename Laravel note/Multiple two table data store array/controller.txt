    public function storeAnnouncement(RequestAnnouncement $request)
{
    // dd($request);
    $event = null;

    try {
        DB::beginTransaction();

        $announcement = Category::create([
                       'title' => $request->title,
                       'sub_title' => $request->sub_title
                    ]);
                  

                    $event = $announcement;
                  

        if (isset($request->agendaInfo) && is_array($request->agendaInfo)) {
            foreach ($request->agendaInfo as $agendaItem) {
                $event->subCategory()->create([
                    'category_id' => $event->id,
                    'agendaTitle' => $agendaItem['agendaTitle'] ?? null,
                 
                ]);

            }
        }

        DB::commit();
    } catch (Exception $exception) {
        DB::rollBack();
        // Handle exception...
    }

    return response()->json(['data' => $event], 201);
}

public function update(Request $request, $id)
{
    try {
        DB::beginTransaction();

        $announcement = Category::findOrFail($id);

        $announcement->update([
            'title' => $request->title,
            'sub_title' => $request->sub_title
        ]);

        $announcement->subCategory()->delete(); // Delete existing sub-categories

        if (isset($request->agendaInfo) && is_array($request->agendaInfo)) {
            foreach ($request->agendaInfo as $agendaItem) {
                SubCategory::create([
                    'category_id' => $announcement->id,
                    'agendaTitle' => $agendaItem['agendaTitle'] ?? null,
                ]);
            }
        }

        DB::commit();
    } catch (Exception $exception) {
        DB::rollBack();
        // Handle exception...
        return response()->json(['error' => 'Failed to update announcement'], 500);
    }

    return response()->json(['data' => $announcement], 200);
}
